//! # D-Bus interface proxy for: `org.freedesktop.NetworkManager.Device.Tun`
//!
//! This code was generated by `zbus-xmlgen` `4.0.1` from D-Bus introspection data.
//! Source: `org.freedesktop.NetworkManager.Device.Tun.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::{proxy, Connection, Result};

impl TunProxy<'_> {
    pub async fn new_from_path(
        device_path: zbus::zvariant::OwnedObjectPath,
        connection: &Connection,
    ) -> Result<TunProxy<'_>> {
        TunProxy::builder(connection)
            .path(device_path)?
            .build()
            .await
    }
}

#[proxy(
    default_path = "/org/freedesktop/NetworkManager/Device/Tun",
    default_service = "org.freedesktop.NetworkManager",
    interface = "org.freedesktop.NetworkManager.Device.Tun",
    assume_defaults = true
)]
trait Tun {
    /// Group property
    #[zbus(property)]
    fn group(&self) -> zbus::Result<i64>;

    /// HwAddress property
    #[zbus(property)]
    fn hw_address(&self) -> zbus::Result<String>;

    /// Mode property
    #[zbus(property)]
    fn mode(&self) -> zbus::Result<String>;

    /// MultiQueue property
    #[zbus(property)]
    fn multi_queue(&self) -> zbus::Result<bool>;

    /// NoPi property
    #[zbus(property)]
    fn no_pi(&self) -> zbus::Result<bool>;

    /// Owner property
    #[zbus(property)]
    fn owner(&self) -> zbus::Result<i64>;

    /// VnetHdr property
    #[zbus(property)]
    fn vnet_hdr(&self) -> zbus::Result<bool>;
}
