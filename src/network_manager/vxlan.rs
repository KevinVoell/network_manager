//! # D-Bus interface proxy for: `org.freedesktop.NetworkManager.Device.Vxlan`
//!
//! This code was generated by `zbus-xmlgen` `4.0.1` from D-Bus introspection data.
//! Source: `org.freedesktop.NetworkManager.Device.Vxlan.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::{Connection, Result, proxy};

impl VxlanProxy<'_> {
    pub async fn new_from_path(
        device_path: zbus::zvariant::OwnedObjectPath,
        connection: &Connection,
    ) -> Result<VxlanProxy<'_>> {
        VxlanProxy::builder(connection)
            .path(device_path)?
            .build()
            .await
    }
}

#[proxy(
    default_path = "/org/freedesktop/NetworkManager/Device/Vxlan",
    default_service = "org.freedesktop.NetworkManager",
    interface = "org.freedesktop.NetworkManager.Device.Vxlan",
    assume_defaults = true
)]
pub trait Vxlan {
    /// Ageing property
    #[zbus(property)]
    fn ageing(&self) -> zbus::Result<u32>;

    /// DstPort property
    #[zbus(property)]
    fn dst_port(&self) -> zbus::Result<u16>;

    /// Group property
    #[zbus(property)]
    fn group(&self) -> zbus::Result<String>;

    /// HwAddress property
    #[zbus(property)]
    fn hw_address(&self) -> zbus::Result<String>;

    /// Id property
    #[zbus(property)]
    fn id(&self) -> zbus::Result<u32>;

    /// L2miss property
    #[zbus(property)]
    fn l2miss(&self) -> zbus::Result<bool>;

    /// L3miss property
    #[zbus(property)]
    fn l3miss(&self) -> zbus::Result<bool>;

    /// Learning property
    #[zbus(property)]
    fn learning(&self) -> zbus::Result<bool>;

    /// Limit property
    #[zbus(property)]
    fn limit(&self) -> zbus::Result<u32>;

    /// Local property
    #[zbus(property)]
    fn local(&self) -> zbus::Result<String>;

    /// Parent property
    #[zbus(property)]
    fn parent(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Proxy property
    #[zbus(property)]
    fn proxy(&self) -> zbus::Result<bool>;

    /// Rsc property
    #[zbus(property)]
    fn rsc(&self) -> zbus::Result<bool>;

    /// SrcPortMax property
    #[zbus(property)]
    fn src_port_max(&self) -> zbus::Result<u16>;

    /// SrcPortMin property
    #[zbus(property)]
    fn src_port_min(&self) -> zbus::Result<u16>;

    /// Tos property
    #[zbus(property)]
    fn tos(&self) -> zbus::Result<u8>;

    /// Ttl property
    #[zbus(property)]
    fn ttl(&self) -> zbus::Result<u8>;
}
