//! # D-Bus interface proxy for: `org.freedesktop.NetworkManager.SecretAgent`
//!
//! This code was generated by `zbus-xmlgen` `4.0.1` from D-Bus introspection data.
//! Source: `org.freedesktop.NetworkManager.SecretAgent.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::{proxy, Connection, Result};

impl SecretAgentProxy<'_> {
    pub async fn new_from_path(
        device_path: zbus::zvariant::OwnedObjectPath,
        connection: &Connection,
    ) -> Result<SecretAgentProxy<'_>> {
        SecretAgentProxy::builder(connection)
            .path(device_path)
            .expect("Path not found")
            .build()
            .await
    }
}

#[proxy(
    default_path = "/org/freedesktop/NetworkManager/SecretAgent",
    default_service = "org.freedesktop.NetworkManager",
    interface = "org.freedesktop.NetworkManager.SecretAgent",
    assume_defaults = true
)]
trait SecretAgent {
    /// CancelGetSecrets method
    fn cancel_get_secrets(
        &self,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
        setting_name: &str,
    ) -> zbus::Result<()>;

    /// DeleteSecrets method
    fn delete_secrets(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// GetSecrets method
    fn get_secrets(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
        setting_name: &str,
        hints: &[&str],
        flags: u32,
    ) -> zbus::Result<
        std::collections::HashMap<
            String,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        >,
    >;

    /// SaveSecrets method
    fn save_secrets(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        connection_path: &zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;
}
