//! # D-Bus interface proxy for: `org.freedesktop.NetworkManager.Device.IPTunnel`
//!
//! This code was generated by `zbus-xmlgen` `4.0.1` from D-Bus introspection data.
//! Source: `org.freedesktop.NetworkManager.Device.IPTunnel.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::{proxy, Connection, Result};

impl IPTunnelProxy<'_> {
    pub async fn new_from_path(
        device_path: zbus::zvariant::OwnedObjectPath,
        connection: &Connection,
    ) -> Result<IPTunnelProxy<'_>> {
        IPTunnelProxy::builder(connection)
            .path(device_path)
            .expect("Path not found")
            .build()
            .await
    }
}

#[proxy(
    default_path = "/org/freedesktop/NetworkManager/Device/IPTunnel",
    default_service = "org.freedesktop.NetworkManager",
    interface = "org.freedesktop.NetworkManager.Device.IPTunnel",
    assume_defaults = true
)]
trait IPTunnel {
    /// EncapsulationLimit property
    #[zbus(property)]
    fn encapsulation_limit(&self) -> zbus::Result<u8>;

    /// Flags property
    #[zbus(property)]
    fn flags(&self) -> zbus::Result<u32>;

    /// FlowLabel property
    #[zbus(property)]
    fn flow_label(&self) -> zbus::Result<u32>;

    /// FwMark property
    #[zbus(property)]
    fn fw_mark(&self) -> zbus::Result<u32>;

    /// InputKey property
    #[zbus(property)]
    fn input_key(&self) -> zbus::Result<String>;

    /// Local property
    #[zbus(property)]
    fn local(&self) -> zbus::Result<String>;

    /// Mode property
    #[zbus(property)]
    fn mode(&self) -> zbus::Result<u32>;

    /// OutputKey property
    #[zbus(property)]
    fn output_key(&self) -> zbus::Result<String>;

    /// Parent property
    #[zbus(property)]
    fn parent(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// PathMtuDiscovery property
    #[zbus(property)]
    fn path_mtu_discovery(&self) -> zbus::Result<bool>;

    /// Remote property
    #[zbus(property)]
    fn remote(&self) -> zbus::Result<String>;

    /// Tos property
    #[zbus(property)]
    fn tos(&self) -> zbus::Result<u8>;

    /// Ttl property
    #[zbus(property)]
    fn ttl(&self) -> zbus::Result<u8>;
}
