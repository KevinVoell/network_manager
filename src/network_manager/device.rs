//! # D-Bus interface proxy for: `org.freedesktop.NetworkManager.Device`
//!
//! This code was generated by `zbus-xmlgen` `4.0.1` from D-Bus introspection data.
//! Source: `org.freedesktop.NetworkManager.Device.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,

use zbus::{Connection, Result, proxy};

use super::device_state::DeviceState;
use super::device_type::DeviceType;
use super::device_capabilities::DeviceCapabilities;
use super::device_state_reason::DeviceStateReason;
use super::metered::Metered;
use super::connectivity_state::ConnectivityState;
use super::device_interface_flags::DeviceInterfaceFlags;

impl DeviceProxy<'_> {
    pub async fn new_from_path(
        device_path: zbus::zvariant::OwnedObjectPath,
        connection: &Connection,
    ) -> Result<DeviceProxy<'_>> {
        DeviceProxy::builder(connection)
            .path(device_path)?
            .build()
            .await
    }

    /// Get the device state as a typed enum
    pub async fn get_state(&self) -> Result<DeviceState> {
        let state_value = self.state().await?;
        Ok(DeviceState::from(state_value))
    }

    /// Get the device type as a typed enum
    pub async fn get_device_type(&self) -> Result<DeviceType> {
        let type_value = self.device_type().await?;
        Ok(DeviceType::from(type_value))
    }

    /// Get the device capabilities as typed bitflags
    pub async fn get_capabilities(&self) -> Result<DeviceCapabilities> {
        let caps_value = self.capabilities().await?;
        Ok(DeviceCapabilities::from(caps_value))
    }

    /// Get the device state reason as a typed tuple (state, reason)
    pub async fn get_state_reason(&self) -> Result<(DeviceState, DeviceStateReason)> {
        let (state_value, reason_value) = self.state_reason().await?;
        Ok((DeviceState::from(state_value), DeviceStateReason::from(reason_value)))
    }

    /// Get the metered status as a typed enum
    pub async fn get_metered(&self) -> Result<Metered> {
        let metered_value = self.metered().await?;
        Ok(Metered::from(metered_value))
    }

    /// Get the IPv4 connectivity state as a typed enum
    pub async fn get_ip4_connectivity(&self) -> Result<ConnectivityState> {
        let connectivity_value = self.ip4_connectivity().await?;
        Ok(ConnectivityState::from(connectivity_value))
    }

    /// Get the IPv6 connectivity state as a typed enum
    pub async fn get_ip6_connectivity(&self) -> Result<ConnectivityState> {
        let connectivity_value = self.ip6_connectivity().await?;
        Ok(ConnectivityState::from(connectivity_value))
    }

    /// Get the interface flags as typed bitflags
    pub async fn get_interface_flags(&self) -> Result<DeviceInterfaceFlags> {
        let flags_value = self.interface_flags().await?;
        Ok(DeviceInterfaceFlags::from(flags_value))
    }
}

#[proxy(
    default_path = "/org/freedesktop/NetworkManager/Devices",
    default_service = "org.freedesktop.NetworkManager",
    interface = "org.freedesktop.NetworkManager.Device",
    assume_defaults = true
)]
pub trait Device {
    /// Delete method
    fn delete(&self) -> zbus::Result<()>;

    /// Disconnect method
    fn disconnect(&self) -> zbus::Result<()>;

    /// GetAppliedConnection method
    #[allow(clippy::type_complexity)]
    fn get_applied_connection(
        &self,
        flags: u32,
    ) -> zbus::Result<(
        std::collections::HashMap<
            String,
            std::collections::HashMap<String, zbus::zvariant::OwnedValue>,
        >,
        u64,
    )>;

    /// Reapply method
    fn reapply(
        &self,
        connection: std::collections::HashMap<
            &str,
            std::collections::HashMap<&str, zbus::zvariant::Value<'_>>,
        >,
        version_id: u64,
        flags: u32,
    ) -> zbus::Result<()>;

    /// StateChanged signal
    #[zbus(signal, name = "StateChanged")]
    fn device_state_changed(&self, new_state: u32, old_state: u32, reason: u32)
    -> zbus::Result<()>;

    /// ActiveConnection property
    #[zbus(property)]
    fn active_connection(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Autoconnect property
    #[zbus(property)]
    fn autoconnect(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_autoconnect(&self, value: bool) -> zbus::Result<()>;

    /// AvailableConnections property
    #[zbus(property)]
    fn available_connections(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// Capabilities property
    #[zbus(property)]
    fn capabilities(&self) -> zbus::Result<u32>;

    /// DeviceType property
    #[zbus(property)]
    fn device_type(&self) -> zbus::Result<u32>;

    /// Dhcp4Config property
    #[zbus(property)]
    fn dhcp4_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Dhcp6Config property
    #[zbus(property)]
    fn dhcp6_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Driver property
    #[zbus(property)]
    fn driver(&self) -> zbus::Result<String>;

    /// DriverVersion property
    #[zbus(property)]
    fn driver_version(&self) -> zbus::Result<String>;

    /// FirmwareMissing property
    #[zbus(property)]
    fn firmware_missing(&self) -> zbus::Result<bool>;

    /// FirmwareVersion property
    #[zbus(property)]
    fn firmware_version(&self) -> zbus::Result<String>;

    /// HwAddress property
    #[zbus(property)]
    fn hw_address(&self) -> zbus::Result<String>;

    /// Interface property
    #[zbus(property)]
    fn interface(&self) -> zbus::Result<String>;

    /// InterfaceFlags property
    #[zbus(property)]
    fn interface_flags(&self) -> zbus::Result<u32>;

    /// Ip4Address property
    #[zbus(property)]
    fn ip4_address(&self) -> zbus::Result<u32>;

    /// Ip4Config property
    #[zbus(property)]
    fn ip4_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Ip4Connectivity property
    #[zbus(property)]
    fn ip4_connectivity(&self) -> zbus::Result<u32>;

    /// Ip6Config property
    #[zbus(property)]
    fn ip6_config(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Ip6Connectivity property
    #[zbus(property)]
    fn ip6_connectivity(&self) -> zbus::Result<u32>;

    /// IpInterface property
    #[zbus(property)]
    fn ip_interface(&self) -> zbus::Result<String>;

    /// LldpNeighbors property
    #[zbus(property)]
    fn lldp_neighbors(
        &self,
    ) -> zbus::Result<Vec<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>>;

    /// Managed property
    #[zbus(property)]
    fn managed(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_managed(&self, value: bool) -> zbus::Result<()>;

    /// Metered property
    #[zbus(property)]
    fn metered(&self) -> zbus::Result<u32>;

    /// Mtu property
    #[zbus(property)]
    fn mtu(&self) -> zbus::Result<u32>;

    /// NmPluginMissing property
    #[zbus(property)]
    fn nm_plugin_missing(&self) -> zbus::Result<bool>;

    /// Path property
    #[zbus(property)]
    fn path(&self) -> zbus::Result<String>;

    /// PhysicalPortId property
    #[zbus(property)]
    fn physical_port_id(&self) -> zbus::Result<String>;

    /// Ports property
    #[zbus(property)]
    fn ports(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// Real property
    #[zbus(property)]
    fn real(&self) -> zbus::Result<bool>;

    /// State property
    #[zbus(property)]
    fn state(&self) -> zbus::Result<u32>;

    /// StateReason property
    #[zbus(property)]
    fn state_reason(&self) -> zbus::Result<(u32, u32)>;

    /// Udi property
    #[zbus(property)]
    fn udi(&self) -> zbus::Result<String>;
}
